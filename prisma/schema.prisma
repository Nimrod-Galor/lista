// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// after change to schems run: npx prisma generate
// npx prisma format

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime          @default(now())
  email                    String            @unique
  password                 String
  salt                     String
  userName                 String?
  role                     Role              @relation(fields: [roleId], references: [id])
  roleId                   String            @db.ObjectId
  token                    RememberMeToken[]
  emailVerified            Boolean           @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?
  createdLists             List[]            @relation("createdLists")
  viewableLists            List[]            @relation("viewableLists", fields: [viewableListsIDs], references: [id])
  viewableListsIDs         String[]          @db.ObjectId
  editableLists            List[]            @relation("editableLists", fields: [editableListsIDs], references: [id])
  editableListsIDs         String[]          @db.ObjectId
}

model RememberMeToken {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  user              User          @relation(fields: [userId], references: [id])
  userId            String        @db.ObjectId
  token             String        @unique
  createdAt         DateTime      @default(now())
}

model Page {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  metatitle         String
  metadescription   String
  slug              String        @unique
  title             String
  body              String
  publish           Boolean       @default(false)
}

model List {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  title             String
  description       String
  body              Json
  publish           Boolean       @default(false)
  viewCount         Int           @default(0)
  author            User          @relation("createdLists", fields: [authorId], references: [id])
  authorId          String        @db.ObjectId
  viewers           User[]        @relation("viewableLists", fields: [viewersIDs], references: [id])
  viewersIDs        String[]      @db.ObjectId
  editors           User[]        @relation("editableLists", fields: [editorsIDs], references: [id])
  editorsIDs        String[]      @db.ObjectId
}

model Role {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String        @unique @default("subscriber")
  description       String
  default           Boolean       @default(false)
  User              User[]
}
